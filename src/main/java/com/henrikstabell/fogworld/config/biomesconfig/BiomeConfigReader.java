package com.henrikstabell.fogworld.config.biomesconfig;

import com.google.gson.Gson;
import net.minecraft.client.Minecraft;
import net.minecraft.resources.ResourceLocation;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;

public class BiomeConfigReader {

    private static final File configDir = new File(Minecraft.getInstance().gameDirectory + "/config/fogworld/biomes/");

    /**
     * Reads the JSON config files that have been generated by {@link BiomeConfigGenerator}.
     * This is done for every biome registered to the Forge Biome Registry.
     * Used to get Fog and Poison settings for each biome.
     * TODO: VERY ALPHA! SUBJECT TO CHANGE!
     */
    public static BiomeFogProperties readBiomeConfig(ResourceLocation biomeKey) {

        BiomeFogProperties biomeFogProps;

        if (biomeKey == null) {
            return new BiomeFogProperties( false,6F,"#FFFFFF",false,1200,1,biomeKey.getNamespace() + ":" + biomeKey.getPath());
        }
        try {
            Gson gson = new Gson();

            File allBiomesFile = new File(configDir + "/" + "all_biomes.json"); // Override to set the same settings for every biome.
            if (allBiomesFile.exists()) {
                Reader allBiomesFileReader = Files.newBufferedReader(Paths.get(configDir + "/" + "all_biomes.json"));
                biomeFogProps = gson.fromJson(allBiomesFileReader, BiomeFogProperties.class);
                allBiomesFileReader.close();
            } else {
                Reader biomeConfigReader = Files.newBufferedReader(Paths.get(configDir + "/" + biomeKey.getNamespace() + "/" + biomeKey.getPath() + ".json"));
                biomeFogProps = gson.fromJson(biomeConfigReader, BiomeFogProperties.class);
                biomeConfigReader.close();
            }
            return biomeFogProps;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new BiomeFogProperties( false, 6F, "#FFFFFF", false, 1200, 1, biomeKey.getNamespace() + ":" + biomeKey.getPath());
    }

    /**
     * Checks whether or not a config file exists for the specified biome and returns a boolean of true if it exists, false if it does not exist.
     * Used to prevent reading values from a null config file.
     * @param biomeKey {@link net.minecraft.resources.ResourceLocation}
     * @return boolean
     */
    public static boolean doesBiomeConfigExist(ResourceLocation biomeKey) {
        return new File(configDir + "/" + biomeKey.getNamespace() + "/" + biomeKey.getPath() + ".json").exists();
    }
}
