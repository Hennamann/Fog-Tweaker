buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.configFile = file('build.properties')
ext.localFile = file('local.properties')
ext.config = parseConfig(configFile)

if (localFile.exists()) {
    ext.local = parseConfig(localFile)
}

version = "${config.version}"
group = "com.henrikstabell.fogtweaker" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "fogtweaker"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${config.mcVersion}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            //BoP and Terrablender uses Mixins, this fixes mapping issues during runtime caused by different mappings by Mixin.
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // The below fields allow you to use your own username and skin during runtime/testing.
            // This works for Microsoft accounts too, but the accessToken will be in the system keystore for your OS… Happy hunting.
            // NOTE! Do not store this info in the gradle file itself, store them in your global build.gradle file in your user home folder!!
            if (project.hasProperty('mc_uuid')) {
                //Your uuid with or without dashes.
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file or in the case of Microsoft accounts; -
                // in the system keystore (ex. KeyChain on MacOS).
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                fogtweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                fogtweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'fogtweaker', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                fogtweaker {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://www.cursemaven.com' } // Configured etc…
    // flatDir { dirs "libs" }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${config.mcVersion}-${config.forgeVersion}"

    // Biome Testing
    runtimeOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${config.mcVersion}-${config.terraBlenderVersion}") //TerraBlender is in the forge maven repo.
    runtimeOnly fg.deobf("curse.maven:biomes-o-plenty-220318:${config.bopId}")
    runtimeOnly fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:${config.bygId}")
    runtimeOnly fg.deobf("curse.maven:natures-compass-252848:${config.naturesCompassId}")
    runtimeOnly fg.deobf("curse.maven:terralith-513688:${config.terralithId}")

    // For testing config compat.
    runtimeOnly fg.deobf("curse.maven:configured-457570:${config.configuredId}")
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:${config.catalogueId}")

}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

def getManifestAttributes() {
    return [
            "Specification-Title"     : "Fogtweaker",
            "Specification-Vendor"    : "Hennamann",
            "Specification-Version"   : "${config.version}",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "Hennamann",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

jar {
    manifest.attributes(getManifestAttributes())
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    manifest.attributes(getManifestAttributes())
    archiveClassifier.set("sources")
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    manifest.attributes(getManifestAttributes())
    archiveClassifier.set("deobf")
}

task copyBuildXml(type: Copy) {
    from 'build.properties'
    into 'output'
}

javadoc {
    delete 'build/docs/javadoc'
    options.encoding("UTF-8")
    options.addStringOption("docencoding", "utf-8")
    options.addStringOption("charset", "utf-8")
    //options.stylesheetFile = new File(projectDir, "javadoc_style.css"). TODO: Need to make a custom stylesheet for java 17/18…
}

task copyJavadoc(type: Copy) {
    dependsOn javadoc
    from 'build/docs/javadoc'
    into 'docs'
}

jar.finalizedBy('reobfJar')

if (localFile.exists()) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'com.henrikstabell.fogtweaker'
                artifactId 'FogTweaker-1.18.1'

                artifact jar
                artifact deobfJar
                artifact sourcesJar
            }
        }
        repositories {
            maven {
                credentials {
                    username = "${local.userMaven}"
                    password = "${local.passMaven}"
                }
                url "https://maven.henrikstabell.com/mods"
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}